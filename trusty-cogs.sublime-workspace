{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"firema",
				"firemaking_rank"
			],
			[
				"ranged_",
				"ranged_level"
			],
			[
				"constitut",
				"constitution"
			],
			[
				"strength",
				"strength_xp"
			],
			[
				"defence",
				"defence_rank"
			],
			[
				"ma",
				"make_url_player_details_ajax"
			],
			[
				"last_c",
				"last_checked_time"
			],
			[
				"last",
				"last_modified"
			],
			[
				"make",
				"make_url_player_details"
			],
			[
				"runesca",
				"runescape_name"
			],
			[
				"get_prof",
				"get_profile_obj"
			],
			[
				"range",
				"ranged_total"
			],
			[
				"mele",
				"melee_total"
			],
			[
				"magic",
				"magic_total"
			],
			[
				"scissors",
				"scissors"
			],
			[
				"acti",
				"activitycheck"
			],
			[
				"settings",
				"settings_file"
			],
			[
				"server",
				"server_roles"
			],
			[
				"check",
				"check_gab_usernames"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import discord\nfrom discord.ext import commands\nfrom .utils.dataIO import dataIO\nimport aiohttp\nimport json\nimport random\nfrom random import sample\nfrom random import choice\nimport time\n\n\nclass Tarot:\n    \"\"\"It's time to get your fortune!!!\"\"\"\n\n    def __init__(self, bot):\n        self.bot = bot\n        self.tarot_cards = dataIO.load_json(\"data/tarot/tarot.json\")\n\n    def get_colour(self):\n        colour =''.join([choice('0123456789ABCDEF')for x in range(6)])\n        return int(colour, 16)\n\n    @commands.group(pass_context=True)\n    async def tarot(self, ctx):\n        if ctx.invoked_subcommand is None:\n            await self.bot.send_cmd_help(ctx)\n    \n    @tarot.command(name=\"life\", pass_context=True)\n    async def _life(self, ctx, user: discord.Member=None):\n        card_meaning = [\"Past\", \"Present\", \"Future\", \"Potential\", \"Reason\"]\n        if user is None:\n            user = ctx.message.author\n        userseed = user.id\n        \n        random.seed(int(userseed))\n        cards = []\n        cards = sample((range(1, 78)), 5)\n        \n        embed = discord.Embed(title=\"Tarot reading for {}\".format(user.display_name),\n                              colour=discord.Colour(value=self.get_colour()))\n        number = 0\n        for card in cards:\n            embed.add_field(name=\"{0}: {1}\".format(card_meaning[number], self.tarot_cards[str(card)][\"card_name\"]),\n                            value=self.tarot_cards[str(card)][\"card_meaning\"])\n            number += 1\n        await self.bot.send_message(ctx.message.channel, embed=embed)\n    \n    @tarot.command(name=\"reading\", pass_context=True)\n    async def _reading(self, ctx, user: discord.Member=None):\n        card_meaning = [\"Past\", \"Present\", \"Future\", \"Potential\", \"Reason\"]\n        if user is None:\n            user = ctx.message.author\n        \n        cards = []\n        cards = sample((range(1, 78)), 5)\n        \n        embed = discord.Embed(title=\"Tarot reading for {}\".format(user.display_name),\n                              colour=discord.Colour(value=self.get_colour()))\n        number = 0\n        for card in cards:\n            embed.add_field(name=\"{0}: {1}\".format(card_meaning[number], self.tarot_cards[str(card)][\"card_name\"]),\n                            value=self.tarot_cards[str(card)][\"card_meaning\"])\n            number += 1\n        await self.bot.send_message(ctx.message.channel, embed=embed)\n\n\n    @tarot.command(name=\"card\", pass_context=True)\n    async def _card(self, ctx, *, msg=None):\n        user = ctx.message.author.id\n        # msg = message.content\n        card = None\n\n        if msg is None:\n            card = self.tarot_cards[str(random.randint(1, 78))]\n\n        elif msg.isdigit() and int(msg) > 0 and int(msg) < 79:\n            card = self.tarot_cards[str(msg)]\n        \n        elif not msg.isdigit():\n            for cards in self.tarot_cards:\n                if msg.lower() in self.tarot_cards[cards][\"card_name\"].lower():\n                    card = self.tarot_cards[cards]\n            if card is None:\n                await self.bot.say(\"That card does not exist!\")\n                return\n\n        embed = discord.Embed(title=card[\"card_name\"],\n                              description=card[\"card_meaning\"],\n                              colour=discord.Colour(value=self.get_colour()),\n                              url=card[\"card_url\"])\n        embed.set_image(url=card[\"card_img\"])\n        await self.bot.send_message(ctx.message.channel, embed=embed)\n\n\ndef setup(bot):\n    bot.add_cog(Tarot(bot))",
			"file": "tarot/tarot.py",
			"file_size": 3611,
			"file_write_time": 131766085755310147,
			"settings":
			{
				"buffer_size": 3516,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 170.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"git push",
				"Git: Push"
			],
			[
				"git pull",
				"Git: Pull"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"git: ",
				"Git: Fetch"
			],
			[
				"git swi",
				"Git: Switch Repo"
			],
			[
				"package control remove",
				"Package Control: Remove Package"
			],
			[
				"package control",
				"Package Control: Install Package"
			],
			[
				"package control install",
				"Package Control: Install Package"
			],
			[
				"package control: remove",
				"Package Control: Remove Package"
			],
			[
				"git",
				"Git: Reset (hard) HEAD"
			],
			[
				"git:",
				"Git: Status"
			],
			[
				"package",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"git bra",
				"Git: Change Branch"
			],
			[
				"git stat",
				"Git: Status"
			]
		],
		"width": 444.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/E/github/Trusty-cogs",
		"/E/github/Trusty-cogs/addimage",
		"/E/github/Trusty-cogs/anime",
		"/E/github/Trusty-cogs/badges",
		"/E/github/Trusty-cogs/compliment",
		"/E/github/Trusty-cogs/faces",
		"/E/github/Trusty-cogs/hockey",
		"/E/github/Trusty-cogs/hue",
		"/E/github/Trusty-cogs/pillconvert",
		"/E/github/Trusty-cogs/pillconvert/data",
		"/E/github/Trusty-cogs/serverwhitelist",
		"/E/github/Trusty-cogs/tarot"
	],
	"file_history":
	[
		"/E/github/Trusty-cogs/stickyroles/stickyroles.py",
		"/E/github/Trusty-cogs/compliment/compliment.py",
		"/E/github/Trusty-cogs/compliment/info.json",
		"/C/Users/Damez/Downloads/Revolution-Rotation-Calculator--master/Revolution Rotation Calculator.py",
		"/E/github/Trusty-cogs/badges/badges.py",
		"/E/github/Trusty-cogs/hockey/hockey.py",
		"/E/github/Trusty-cogs/hockey/embeds.py",
		"/E/github/Trusty-cogs/README.md",
		"/E/github/Trusty-cogs/hue/hue.py",
		"/E/github/Trusty-cogs/star/info.json",
		"/E/github/Trusty-cogs/serverwhitelist/serverwhitelist.py",
		"/E/github/Trusty-cogs/anime/anime.py",
		"/E/github/Trusty-cogs/compliment/data/insults.json",
		"/E/github/Trusty-cogs/chatter/chatter.py",
		"/E/github/Trusty-cogs/pillconvert/pillconvert.py",
		"/E/github/Trusty-cogs/pillconvert/__init__.py",
		"/E/github/Trusty-cogs/insult/insult.py",
		"/E/github/Trusty-cogs/insult/info.json",
		"/E/github/Trusty-cogs/runescape/profile.py",
		"/E/github/Trusty-cogs/runescape/info.json",
		"/E/github/Trusty-cogs/compliment/compliments.py",
		"/E/github/Trusty-cogs/compliment/__init__.py",
		"/E/github/Trusty-cogs/insult/insults.py",
		"/E/github/Trusty-cogs/insult/__init__.py",
		"/E/github/Trusty-cogs/insult/compliments.py",
		"/E/github/Trusty-cogs/runescape/runescape.py",
		"/E/github/Trusty-cogs/imagemaker/imagemaker.py",
		"/E/github/Trusty-cogs/acceptrules/acceptrules.py",
		"/E/github/Trusty-cogs/star/star.py",
		"/E/github/Trusty-cogs/addimage/addimage.py",
		"/E/github/Trusty-cogs/serverwhitelist/info.json",
		"/E/github/Trusty-cogs/activity/activity.py",
		"/E/github/Trusty-cogs/translate/translate.py",
		"/E/github/Trusty-cogs/chatterbot/chatterbot.py",
		"/E/github/Trusty-cogs/modlogs/modlogs.py",
		"/E/github/Trusty-cogs/qposts/qposts.py",
		"/E/github/Trusty-cogs/autorole/autorole.py",
		"/E/github/Trusty-cogs/trustybot/trustybot.py",
		"/E/github/Trusty-cogs/conversions/conversions.py",
		"/E/github/Trusty-cogs/imgflip/imgflip.py",
		"/E/github/Trusty-cogs/serverwhitelist/__init__.py",
		"/E/github/Trusty-cogs/runescape/__init__.py",
		"/E/github/Trusty-cogs/hockey/game.py",
		"/E/github/Trusty-cogs/tweets/tweets.py",
		"/E/github/Trusty-cogs/emojireact/emojireact.py",
		"/E/github/Trusty-cogs/starboard/starboard.py",
		"/D/Games/Steam/steamapps/common/Beat Saber/CustomSongs/There Can Be A Way/Hard.json",
		"/C/Users/Damez/Desktop/bancheck.py",
		"/E/github/Trusty-cogs/emojireact/info.json",
		"/E/github/Trusty-cogs/autorole/__init__.py",
		"/E/github/Trusty-cogs/emojireact/unicode_codes.py",
		"/C/Users/Damez/Downloads/1.44inch-LCD-HAT-Code/RaspberryPi/python/lcd_demo/main.py",
		"/C/Users/Damez/Downloads/1.44inch-LCD-HAT-Code/RaspberryPi/python/lcd_demo/LCD_Config.py",
		"/C/Users/Damez/Downloads/1.44inch-LCD-HAT-Code/RaspberryPi/python/lcd_demo/LCD_1in44.py",
		"/C/Users/Damez/AppData/Local/Temp/fz3temp-2/rc.local",
		"/C/Users/Damez/Google Drive/Pictures/Superintendant/main.py",
		"/C/Users/Damez/Downloads/beethoven11_v1.0.0.0 (1).mdu",
		"/C/Users/Damez/Downloads/1.44inch-LCD-HAT-Code/RaspberryPi/python/key_demo/LCD_1in44.py",
		"/C/Users/Damez/Downloads/1.44inch-LCD-HAT-Code/RaspberryPi/python/key_demo/LCD_Key.py",
		"/D/github/Trusty-Bot/data/qposts/qposts.json",
		"/E/github/Trusty-cogs/activity/__init__.py",
		"/C/Users/Damez/Downloads/shitpost.py",
		"/C/Users/Damez/Downloads/shitpost/__init__.py",
		"/C/Users/Damez/Downloads/shitpost/shitpost.py",
		"/E/github/Trusty-cogs/backup/info.json",
		"/E/github/Trusty-cogs/backup/backup.py",
		"/E/github/Trusty-cogs/hockey/__init__.py",
		"/E/github/Trusty-cogs/hockey/teams.py",
		"/E/github/Trusty-cogs/halo/halo.py",
		"/C/Users/Damez/Desktop/printbox.py",
		"/C/Users/Damez/Desktop/rps.py",
		"/D/Videos/Movie.2017.HD-TS x264 -CPG/Password.txt",
		"/E/github/Trusty-cogs/halo/info.json",
		"/E/github/Trusty-Bot/cogs/activity.py",
		"/E/github/Trusty-Bot/cogs/tweets.py",
		"/E/github/Trusty-Bot/.gitignore",
		"/E/github/Trusty-Bot/data/chatterbot/log.json",
		"/E/github/Trusty-Bot/data/red/cogs.json",
		"/E/github/Trusty-Bot/data/activity/settings.json",
		"/E/github/Trusty-Bot/data/activity/log.json",
		"/E/github/Trusty-Bot/data/RSS/feeds.json",
		"/E/github/Trusty-Bot/cogs/acceptrules.py",
		"/E/github/Trusty-Bot/cogs/remindme.py",
		"/E/github/Trusty-cogs/activity/info.json",
		"/E/github/Trusty-Bot/cogs/owner.py",
		"/E/github/Trusty-Bot/cogs/lmao.py",
		"/E/github/Trusty-Bot/cogs/emojireact.py",
		"/E/github/Trusty-Bot/cogs/dnadecode.py",
		"/E/github/Trusty-Bot/cogs/trustybot.py",
		"/E/github/Trusty-Bot/cogs/reee.py",
		"/E/github/Trusty-Bot/cogs/gab.py",
		"/E/github/Trusty-Bot/cogs/badges.py",
		"/E/github/Trusty-Bot/data/gab/settings.json",
		"/E/github/Trusty-Bot/cogs/bartender.py",
		"/E/github/Discord-Selfbot/requirements.txt",
		"/E/github/Discord-Selfbot/cogs/getfortune.py"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 105.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"invoke",
			"utc",
			"await self.bot.send_cmd_help(ctx)",
			"send_cmd",
			"user",
			"await self.colorconvert(",
			"self.bot.say",
			"attack",
			"[\"Attack\", p.attack[\"level\"], p.attack[\"xp\"], p.attack[\"rank\"]],",
			"attack",
			"Attack",
			"attack",
			"smithing",
			"getroles",
			"group",
			"RedContext",
			"case",
			"self.direct",
			"modlogset",
			"modlog",
			"pop",
			"ctx.send(",
			"guild",
			"questscompleted",
			":dict, ",
			"default",
			"replies\" : true",
			"togglejoin",
			"toggljoin",
			"post",
			"self.direct",
			"if await",
			"self.bot.send_message(ctx.message.channel, ",
			"server",
			"choices",
			"get_text",
			"trips",
			"greatawakening",
			"self.config[team][\"goals",
			"server",
			"self.settings",
			"server",
			"self.settings",
			"raw_input"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": true,
		"regex": false,
		"replace_history":
		[
			"await ctx.send_help()",
			"pill_image = await self.make_colour(",
			"ctx.send",
			"invention",
			"divination",
			"dungeoneering",
			"summoning",
			"construction",
			"hunter",
			"runecrafting",
			"farming",
			"slayer",
			"thieving",
			"agility",
			"herblore",
			"mining",
			"smithing",
			"[\"Attack\", p.attack[\"level\"], p.attack[\"xp\"], p.attack[\"rank\"]],",
			"crafting",
			"[\"Attack\", p.attack[\"level\"], p.attack[\"xp\"], p.attack[\"rank\"]],",
			"fishing",
			"fletching",
			"woodcutting",
			"cooking",
			"magic",
			"prayer",
			"ranged",
			"constitution",
			"strength",
			"defence",
			"invention",
			"divination",
			"dungeoneering",
			"summoning",
			"construction",
			"hunter",
			"runecrafting",
			"farming",
			"slayer",
			"thieving",
			"agility",
			"herblore",
			"mining",
			"modlogsetup",
			"self.bot.send_message(ctx.message.channel, ",
			"server",
			"questscomplete",
			" = get_skill()",
			"get_skill()",
			"ctx.send(",
			"guild",
			"get_text()",
			"guild",
			"self.config",
			"guild",
			"self.config",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "tarot/tarot.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3516,
						"regions":
						{
						},
						"selection":
						[
							[
								909,
								909
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 127.0
	},
	"output.git-commit":
	{
		"height": 121.0
	},
	"output.git-pull":
	{
		"height": 121.0
	},
	"output.git-push":
	{
		"height": 121.0
	},
	"pinned_build_system": "",
	"project": "trusty-cogs.sublime-project",
	"replace":
	{
		"height": 73.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"E:\\github\\Red-DiscordBot\\TrustyBot.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 196.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
